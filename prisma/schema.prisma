datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  favTrack       String?
  favAlbum      String?
  favArtist     String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  joined DateTime @default(now())
  reviews Review[]
  reviewComments ReviewComment[]
  likes Like[]
  followers User[] @relation(name: "Followers")
  follows User[] @relation(name: "Followers")
  acivities Activity[] @relation(name: "Activities")
  otherUserActivities Activity[] @relation(name: "Other User Activities")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime @default(now())
  comments ReviewComment[]
  likes Like[]
  title String @default("My Review")
  content String
  rating Int
  type String 
  itemId String
  itemName String
  favoriteTrackName String?
  favoriteTrackId String?
}

model ReviewComment {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  content String
  createdAt DateTime @default(now())
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
}

model Like {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String

  @@id([userId, reviewId])
}

model Activity {
  id  String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "Activities")
  otherUser User? @relation(fields: [otherUserId], references: [id], onDelete: Cascade, name: "Other User Activities")
  otherUserId String?
  itemId String?
  itemType String?
  activityType String

  createdAt DateTime @default(now())
}